import sys
from load import obtener_apicalls_por_mes_anio, obtener_apicalls_por_anio, obtener_apicalls_historico, obtener_comercios

def seleccionar_opcion(prompt, opciones_validas):
    """Solicita una opci√≥n v√°lida dentro de un conjunto de opciones con validaci√≥n."""
    while True:
        try:
            opcion = int(input(prompt))
            if opcion in opciones_validas:
                return opcion
            print(f"‚ùå Error: Opci√≥n no v√°lida. Debe ser una de {opciones_validas}.")
        except ValueError:
            print("‚ùå Error: Debe ingresar un n√∫mero v√°lido.")

def solicitar_mes():
    """Solicita un mes v√°lido (1-12)."""
    while True:
        try:
            mes = int(input("‚û°Ô∏è Ingrese el mes (1-12): "))
            if 1 <= mes <= 12:
                return mes
            print("‚ùå Error: El mes debe estar entre 1 y 12.")
        except ValueError:
            print("‚ùå Error: Debe ingresar un n√∫mero v√°lido.")

def solicitar_anio():
    """Solicita un a√±o v√°lido."""
    while True:
        try:
            anio = int(input("‚û°Ô∏è Ingrese el a√±o (ejemplo: 2024): "))
            if anio >= 1900:
                return anio
            print("‚ùå Error: A√±o no v√°lido.")
        except ValueError:
            print("‚ùå Error: Debe ingresar un n√∫mero v√°lido.")

def main():
    print("üìå Por favor seleccione la forma de facturaci√≥n.")
    print("0. Mes/A√±o espec√≠fico")
    print("1. A√±o espec√≠fico")
    print("2. Todo el hist√≥rico")

    forma_facturacion = seleccionar_opcion("‚û°Ô∏è Ingrese su elecci√≥n: ", {0, 1, 2})

    anio, mes = None, None
    if forma_facturacion == 0:
        mes = solicitar_mes()
        anio = solicitar_anio()
        print(f"üìÖ Facturaci√≥n seleccionada para: {mes}/{anio}")
    elif forma_facturacion == 1:
        anio = solicitar_anio()
        print(f"üìÖ Facturaci√≥n seleccionada para el a√±o: {anio}")
    else:
        print("üìú Facturaci√≥n para todo el hist√≥rico seleccionada.")

    print("\nüìå Seleccione las empresas que desea facturar:")
    print("0. Todas las empresas Activas")
    print("1. Todas las empresas Inactivas")
    print("2. Seleccionar empresa")
    print("3. Seleccionar varias empresas")

    tipo_facturacion = seleccionar_opcion("‚û°Ô∏è Ingrese su elecci√≥n: ", {0, 1, 2, 3})

    comercios = obtener_comercios()
    print("\nüìä DataFrame de Comercios obtenidos:")
    print(comercios)

    comercios_seleccionados = []

    if tipo_facturacion in {2, 3}:
        print("\nüè¢ Lista de empresas disponibles:")
        for idx, row in comercios.iterrows():
            print(f"{idx}. {row['commerce_name']}")

        if tipo_facturacion == 2:
            empresa_idx = seleccionar_opcion("‚û°Ô∏è Seleccione una empresa por su √≠ndice: ", set(range(len(comercios))))
            comercios_seleccionados.append(comercios.iloc[empresa_idx]["commerce_id"])
            print(f"‚úÖ Empresa seleccionada: {comercios.iloc[empresa_idx]['commerce_name']}")
        else:
            while True:
                indices = input("‚û°Ô∏è Seleccione los √≠ndices separados por espacio: ").split()
                try:
                    indices = [int(i) for i in indices]
                    if all(i in range(len(comercios)) for i in indices):
                        comercios_seleccionados = [comercios.iloc[i]["commerce_id"] for i in indices]
                        print(f"‚úÖ Empresas seleccionadas: {[comercios.iloc[i]['commerce_name'] for i in indices]}")
                        break
                    print("‚ùå Error: Uno o m√°s √≠ndices no son v√°lidos.")
                except ValueError:
                    print("‚ùå Error: Debe ingresar n√∫meros separados por espacio.")

    print("\n‚öôÔ∏è Procesando facturaci√≥n seg√∫n selecci√≥n...")

    df_facturacion = []
    for commerce_id in comercios_seleccionados:
        if forma_facturacion == 0:
            df = obtener_apicalls_por_mes_anio(anio, mes, commerce_id)
        elif forma_facturacion == 1:
            df = obtener_apicalls_por_anio(anio, commerce_id)
        else:
            df = obtener_apicalls_historico(commerce_id)
        
        print(f"\nüìä DataFrame generado para comercio ID {commerce_id}:")
        print(df)

        df_facturacion.append(df)

    print("‚úÖ Datos obtenidos y almacenados en DataFrames.")
    print("\nüìä Todos los DataFrames generados:")
    for dataframe in df_facturacion:
        print(dataframe)

if __name__ == "__main__":
    main()
